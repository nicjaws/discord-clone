{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/layouts/guild/chat/MessageInput.js\",\n    _s = $RefreshSig$();\n\nimport { Flex, GridItem, InputGroup, Text, Textarea } from \"@chakra-ui/react\";\nimport getSocket from \"api/getSocket\";\nimport { sendMessage } from \"api/handler/messages\";\nimport React, { useRef, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport ResizeTextarea from \"react-textarea-autosize\";\nimport channelStore from \"stores/channelStore\";\nimport userStore from \"stores/userStore\";\nimport { cKey, dmKey } from \"utils/querykeys\";\nimport \"../css/MessageInput.css\";\nimport FileUploadButton from \"./FileUploadButton\";\nexport default function MessageInput() {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [isSubmitting, setSubmitting] = useState(false);\n  const [currentlyTyping, setCurrentlyTyping] = useState(false);\n  const inputRef = useRef();\n  const {\n    guildId,\n    channelId\n  } = useParams();\n  const qKey = guildId === undefined ? dmKey : cKey(guildId);\n  const {\n    data\n  } = useQuery(qKey);\n  const channel = data === null || data === void 0 ? void 0 : data.find(c => c.id === channelId);\n  const socket = getSocket();\n  const current = userStore(state => state.current);\n  const isTyping = channelStore(state => state.typing);\n\n  async function handleAddMessage(event) {}\n\n  const getTypingString = members => {\n    switch (members.length) {\n      case 1:\n        return members[0];\n\n      case 2:\n        return `${members[0]} and ${members[1]}`;\n\n      case 3:\n        return `${members[0]}, ${members[1]} and ${members[2]}`;\n\n      default:\n        return \"Several people\";\n    }\n  };\n\n  function handleMessageChange(event) {\n    const value = event.target.value;\n\n    if (value.trim().length === 1 && !currentlyTyping) {\n      socket.emit(\"startTyping\", channelId, current === null || current === void 0 ? void 0 : current.username);\n      setCurrentlyTyping(true);\n    } else if (value.length === 0) {\n      socket.emit(\"stopTyping\", channelId, current === null || current === void 0 ? void 0 : current.username);\n      setCurrentlyTyping(false);\n    }\n\n    if (value.length <= 2000) setText(value);\n  }\n\n  const getPlaceholder = () => {\n    if (channel === null || channel === void 0 ? void 0 : channel.user) {\n      return `Message @${channel === null || channel === void 0 ? void 0 : channel.user.username}`;\n    }\n\n    return `Message #${channel === null || channel === void 0 ? void 0 : channel.name}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridItem, {\n    gridColumn: 3,\n    gridRow: 3,\n    px: \"20px\",\n    pb: isTyping.length > 0 ? \"0\" : \"26px\",\n    bg: \"brandGray.light\",\n    children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n      size: \"md\",\n      bg: \"messageInput\",\n      alignItems: \"center\",\n      borderRadius: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Textarea, {\n        as: ResizeTextarea,\n        minH: \"40px\",\n        transition: \"height none\",\n        overflow: \"hidden\",\n        w: \"100%\",\n        resize: \"none\",\n        minRows: 1,\n        pl: \"3rem\",\n        name: \"text\",\n        placeholder: getPlaceholder(),\n        border: \"0\",\n        _focus: {\n          border: \"0\"\n        },\n        ref: inputRef,\n        isDisabled: isSubmitting,\n        value: text,\n        onChange: handleMessageChange,\n        onKeyDown: handleAddMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUploadButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isTyping.length > 0 && /*#__PURE__*/_jsxDEV(Flex, {\n      align: \"center\",\n      fontSize: \"12px\",\n      my: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"1\",\n        fontWeight: \"semibold\",\n        children: getTypingString(isTyping)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"1\",\n        children: [isTyping.length === 1 ? \"is\" : \"are\", \" typing...\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MessageInput, \"2UHEYf8fiGJbsAI4sJNCgX/nWww=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = MessageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/layouts/guild/chat/MessageInput.js"],"names":["Flex","GridItem","InputGroup","Text","Textarea","getSocket","sendMessage","React","useRef","useState","useQuery","useParams","ResizeTextarea","channelStore","userStore","cKey","dmKey","FileUploadButton","MessageInput","text","setText","isSubmitting","setSubmitting","currentlyTyping","setCurrentlyTyping","inputRef","guildId","channelId","qKey","undefined","data","channel","find","c","id","socket","current","state","isTyping","typing","handleAddMessage","event","getTypingString","members","length","handleMessageChange","value","target","trim","emit","username","getPlaceholder","user","name","border"],"mappings":"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","sourcesContent":["import { Flex, GridItem, InputGroup, Text, Textarea } from \"@chakra-ui/react\";\nimport getSocket from \"api/getSocket\";\nimport { sendMessage } from \"api/handler/messages\";\nimport React, { useRef, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport ResizeTextarea from \"react-textarea-autosize\";\nimport channelStore from \"stores/channelStore\";\nimport userStore from \"stores/userStore\";\nimport { cKey, dmKey } from \"utils/querykeys\";\nimport \"../css/MessageInput.css\";\nimport FileUploadButton from \"./FileUploadButton\";\n\nexport default function MessageInput() {\n  const [text, setText] = useState(\"\");\n  const [isSubmitting, setSubmitting] = useState(false);\n  const [currentlyTyping, setCurrentlyTyping] = useState(false);\n  const inputRef = useRef();\n\n  const { guildId, channelId } = useParams();\n  const qKey = guildId === undefined ? dmKey : cKey(guildId);\n  const { data } = useQuery(qKey);\n  const channel = data?.find((c) => c.id === channelId);\n\n  const socket = getSocket();\n  const current = userStore((state) => state.current);\n  const isTyping = channelStore((state) => state.typing);\n\n  async function handleAddMessage(event) {}\n\n  const getTypingString = (members) => {\n    switch (members.length) {\n      case 1:\n        return members[0];\n      case 2:\n        return `${members[0]} and ${members[1]}`;\n      case 3:\n        return `${members[0]}, ${members[1]} and ${members[2]}`;\n      default:\n        return \"Several people\";\n    }\n  };\n\n  function handleMessageChange(event) {\n    const value = event.target.value;\n    if (value.trim().length === 1 && !currentlyTyping) {\n      socket.emit(\"startTyping\", channelId, current?.username);\n      setCurrentlyTyping(true);\n    } else if (value.length === 0) {\n      socket.emit(\"stopTyping\", channelId, current?.username);\n      setCurrentlyTyping(false);\n    }\n    if (value.length <= 2000) setText(value);\n  }\n\n  const getPlaceholder = () => {\n    if (channel?.user) {\n      return `Message @${channel?.user.username}`;\n    }\n    return `Message #${channel?.name}`;\n  };\n\n  return (\n    <GridItem\n      gridColumn={3}\n      gridRow={3}\n      px=\"20px\"\n      pb={isTyping.length > 0 ? \"0\" : \"26px\"}\n      bg=\"brandGray.light\"\n    >\n      <InputGroup\n        size=\"md\"\n        bg=\"messageInput\"\n        alignItems=\"center\"\n        borderRadius=\"8px\"\n      >\n        <Textarea\n          as={ResizeTextarea}\n          minH=\"40px\"\n          transition=\"height none\"\n          overflow=\"hidden\"\n          w=\"100%\"\n          resize=\"none\"\n          minRows={1}\n          pl=\"3rem\"\n          name={\"text\"}\n          placeholder={getPlaceholder()}\n          border=\"0\"\n          _focus={{ border: \"0\" }}\n          ref={inputRef}\n          isDisabled={isSubmitting}\n          value={text}\n          onChange={handleMessageChange}\n          onKeyDown={handleAddMessage}\n        />\n        <FileUploadButton />\n      </InputGroup>\n      {isTyping.length > 0 && (\n        <Flex align={\"center\"} fontSize={\"12px\"} my={1}>\n          <div className=\"typing-indicator\">\n            <span />\n            <span />\n            <span />\n          </div>\n          <Text ml={\"1\"} fontWeight={\"semibold\"}>\n            {getTypingString(isTyping)}\n          </Text>\n          <Text ml={\"1\"}>\n            {isTyping.length === 1 ? \"is\" : \"are\"} typing...{\" \"}\n          </Text>\n        </Flex>\n      )}\n    </GridItem>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}