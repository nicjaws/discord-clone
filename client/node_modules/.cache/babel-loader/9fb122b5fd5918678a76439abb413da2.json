{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/InviteModal.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Checkbox, Input, InputGroup, InputRightElement, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, useClipboard } from \"@chakra-ui/react\";\nimport { getInviteLink } from \"api/handler/guilds\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nexport default function InviteModal({\n  isOpen,\n  onClose\n}) {\n  _s();\n\n  const [inviteLink, setInviteLink] = useState(\"\");\n  const {\n    hasCopied,\n    onCopy\n  } = useClipboard(inviteLink);\n  const [isPermanent, setPermanent] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      bg: \"brandGray.light\",\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        textAlign: \"center\",\n        fontWeight: \"bold\",\n        pb: \"0\",\n        children: \"Invite Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mb: \"4\",\n          children: \"Share this link with others to grant access to this server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          onChange: e => setPermanent(e.target.checked),\n          mb: 4,\n          children: \"Make it unlimited / Never reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            bg: \"brandGray.dark\",\n            borderColor: hasCopied ? \"brandGreen\" : \"black\",\n            borderRadius: \"3px\",\n            focusBorderColor: \"highlight.standard\",\n            value: inviteLink,\n            isReadOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n            width: \"4.5rem\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              h: \"1.75rem\",\n              size: \"sm\",\n              bg: hasCopied ? \"brandGreen\" : \"highlight.standard\",\n              color: \"white\",\n              type: \"submit\",\n              fontSize: \"14px\",\n              _hover: {\n                bg: \"highlight.hover\"\n              },\n              _active: {\n                bg: \"highlight.active\"\n              },\n              _focus: {\n                boxShadow: \"none\"\n              },\n              onClick: onCopy,\n              children: hasCopied ? \"Copied\" : \"Copy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          my: \"2\",\n          fontSize: \"12px\",\n          children: isPermanent ? \"Your invite link won't expire\" : \"Your invite link expires in 1 day and can only be used once\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        bg: \"brandGray.dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InviteModal, \"LG9aJt/wTw3ZoCpuvm+rq5lO9qA=\", false, function () {\n  return [useClipboard];\n});\n\n_c = InviteModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"InviteModal\");","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/InviteModal.js"],"names":["Button","Checkbox","Input","InputGroup","InputRightElement","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Text","useClipboard","getInviteLink","React","useEffect","useState","useParams","InviteModal","isOpen","onClose","inviteLink","setInviteLink","hasCopied","onCopy","isPermanent","setPermanent","e","target","checked","bg","boxShadow"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Checkbox,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport { getInviteLink } from \"api/handler/guilds\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function InviteModal({ isOpen, onClose }) {\n  const [inviteLink, setInviteLink] = useState(\"\");\n  const { hasCopied, onCopy } = useClipboard(inviteLink);\n  const [isPermanent, setPermanent] = useState(false);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent bg=\"brandGray.light\">\n        <ModalHeader textAlign=\"center\" fontWeight=\"bold\" pb={\"0\"}>\n          Invite Link\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text mb=\"4\">\n            Share this link with others to grant access to this server\n          </Text>\n\n          <Checkbox onChange={(e) => setPermanent(e.target.checked)} mb={4}>\n            Make it unlimited / Never reset\n          </Checkbox>\n\n          <InputGroup>\n            <Input\n              bg=\"brandGray.dark\"\n              borderColor={hasCopied ? \"brandGreen\" : \"black\"}\n              borderRadius=\"3px\"\n              focusBorderColor=\"highlight.standard\"\n              value={inviteLink}\n              isReadOnly\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button\n                h=\"1.75rem\"\n                size=\"sm\"\n                bg={hasCopied ? \"brandGreen\" : \"highlight.standard\"}\n                color=\"white\"\n                type=\"submit\"\n                fontSize={\"14px\"}\n                _hover={{ bg: \"highlight.hover\" }}\n                _active={{ bg: \"highlight.active\" }}\n                _focus={{ boxShadow: \"none\" }}\n                onClick={onCopy}\n              >\n                {hasCopied ? \"Copied\" : \"Copy\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n\n          <Text my={\"2\"} fontSize={\"12px\"}>\n            {isPermanent\n              ? \"Your invite link won't expire\"\n              : \"Your invite link expires in 1 day and can only be used once\"}\n          </Text>\n        </ModalBody>\n\n        <ModalFooter bg=\"brandGray.dark\" />\n      </ModalContent>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}