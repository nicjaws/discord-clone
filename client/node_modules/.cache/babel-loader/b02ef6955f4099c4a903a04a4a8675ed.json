{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/ChannelSettingsModal.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, Box, Button, Divider, Flex, FormControl, FormLabel, LightMode, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Switch, Text } from \"@chakra-ui/react\";\nimport { deleteChannel, editChannel, getPrivateChannelMembers } from \"api/handler/channel\";\nimport { getGuildMembers } from \"api/handler/guilds\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { AiOutlineLock } from \"react-icons/ai\";\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport { useQuery } from \"react-query\";\nimport useGetCurrentChannel from \"hooks/useGetCurrentChannel\";\nimport { cKey, mKey } from \"utils/querykeys\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport { ChannelSchema } from \"validation/channel.schema\";\nimport InputField from \"components/shared/InputField\";\nexport default function ChannelSettingsModal({\n  guildId,\n  channelId,\n  isOpen,\n  onClose\n}) {\n  _s();\n\n  const key = mKey(guildId);\n  const channel = useGetCurrentChannel(channelId, cKey(guildId));\n  const members = [];\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [screen, setScreen] = useState(\"START\");\n\n  const goBack = () => setScreen(\"START\");\n\n  const submitClose = () => {\n    setScreen(\"START\");\n    onClose();\n  };\n\n  async function handleEditChannel() {} // eslint-disable-next-line\n\n\n  const {\n    data: current\n  } = useQuery(`${channelId}-members`, async () => {\n    const {\n      data\n    } = await getPrivateChannelMembers(channelId);\n    const current = members.filter(m => data.includes(m.value));\n    setSelectedItems(current);\n    return current;\n  });\n\n  const handleCreateItem = item => {\n    setSelectedItems(curr => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = selectedItems => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  const ListItem = selected => {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        mr: 2,\n        size: \"sm\",\n        src: selected.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textColor: \"#000\",\n        children: selected.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (!channel) return null;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), screen === \"START\" && /*#__PURE__*/_jsxDEV(ModalContent, {\n      bg: \"brandGray.light\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: channel.name,\n          isPublic: channel.isPublic\n        },\n        validationSchema: ChannelSchema,\n        onSubmit: handleEditChannel,\n        children: ({\n          isSubmitting,\n          setFieldValue,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n            children: \"Channel Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              label: \"channel name\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              mt: \"4\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                mb: \"0\",\n                children: /*#__PURE__*/_jsxDEV(Flex, {\n                  align: \"center\",\n                  children: [/*#__PURE__*/_jsxDEV(AiOutlineLock, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    ml: \"2\",\n                    children: \"Private Channel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                defaultChecked: !values.isPublic,\n                onChange: e => {\n                  setFieldValue(\"isPublic\", !e.target.checked);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              mt: \"4\",\n              fontSize: \"14px\",\n              textColor: \"brandGray.accent\",\n              children: \"By making a channel private, only selected members will be able to view this channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this), !values.isPublic && /*#__PURE__*/_jsxDEV(Box, {\n              mt: \"2\",\n              pb: 0,\n              children: /*#__PURE__*/_jsxDEV(CUIAutoComplete, {\n                label: \"Who can access this channel\",\n                placeholder: \"\",\n                onCreateItem: handleCreateItem,\n                items: members,\n                selectedItems: selectedItems,\n                itemRenderer: ListItem,\n                onSelectedItemsChange: changes => handleSelectedItemsChange(changes.selectedItems)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              my: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(LightMode, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setScreen(\"CONFIRM\"),\n                colorScheme: \"red\",\n                variant: \"ghost\",\n                fontSize: \"14px\",\n                rightIcon: /*#__PURE__*/_jsxDEV(FaRegTrashAlt, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 34\n                }, this),\n                children: \"Delete Channel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            bg: \"brandGray.dark\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClose,\n              mr: 6,\n              variant: \"link\",\n              fontSize: \"14px\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              background: \"highlight.standard\",\n              color: \"white\",\n              type: \"submit\",\n              _hover: {\n                bg: \"highlight.hover\"\n              },\n              _active: {\n                bg: \"highlight.active\"\n              },\n              _focus: {\n                boxShadow: \"none\"\n              },\n              isLoading: isSubmitting,\n              fontSize: \"14px\",\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), screen === \"CONFIRM\" && /*#__PURE__*/_jsxDEV(DeleteChannelModal, {\n      goBack: goBack,\n      submitClose: submitClose,\n      name: channel.name,\n      channelId: channel.id,\n      guildId: guildId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChannelSettingsModal, \"ZzGtwi9EjdRMIKJcEezsTmh9G84=\", false, function () {\n  return [useGetCurrentChannel, useQuery];\n});\n\n_c = ChannelSettingsModal;\n\nfunction DeleteChannelModal({\n  goBack,\n  submitClose,\n  name,\n  channelId,\n  guildId\n}) {\n  async function handleDeleteChannel() {}\n\n  return /*#__PURE__*/_jsxDEV(ModalContent, {\n    bg: \"brandGray.light\",\n    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n      fontWeight: \"bold\",\n      pb: \"0\",\n      children: \"Delete Channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      pb: 3,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Are you sure you want to delete #\", name, \"? This cannot be undone.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n      bg: \"brandGray.dark\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        mr: 6,\n        variant: \"link\",\n        onClick: goBack,\n        fontSize: \"14px\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LightMode, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"red\",\n          fontSize: \"14px\",\n          onClick: handleDeleteChannel,\n          children: \"Delete Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = DeleteChannelModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChannelSettingsModal\");\n$RefreshReg$(_c2, \"DeleteChannelModal\");","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/ChannelSettingsModal.js"],"names":["Avatar","Box","Button","Divider","Flex","FormControl","FormLabel","LightMode","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Switch","Text","deleteChannel","editChannel","getPrivateChannelMembers","getGuildMembers","CUIAutoComplete","Form","Formik","React","useState","AiOutlineLock","FaRegTrashAlt","useQuery","useGetCurrentChannel","cKey","mKey","toErrorMap","ChannelSchema","InputField","ChannelSettingsModal","guildId","channelId","isOpen","onClose","key","channel","members","selectedItems","setSelectedItems","screen","setScreen","goBack","submitClose","handleEditChannel","data","current","filter","m","includes","value","handleCreateItem","item","curr","handleSelectedItemsChange","ListItem","selected","image","label","name","isPublic","isSubmitting","setFieldValue","values","e","target","checked","changes","bg","boxShadow","id","DeleteChannelModal","handleDeleteChannel"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  Button,\n  Divider,\n  Flex,\n  FormControl,\n  FormLabel,\n  LightMode,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport {\n  deleteChannel,\n  editChannel,\n  getPrivateChannelMembers,\n} from \"api/handler/channel\";\nimport { getGuildMembers } from \"api/handler/guilds\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { AiOutlineLock } from \"react-icons/ai\";\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport { useQuery } from \"react-query\";\nimport useGetCurrentChannel from \"hooks/useGetCurrentChannel\";\nimport { cKey, mKey } from \"utils/querykeys\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport { ChannelSchema } from \"validation/channel.schema\";\nimport InputField from \"components/shared/InputField\";\n\nexport default function ChannelSettingsModal({\n  guildId,\n  channelId,\n  isOpen,\n  onClose,\n}) {\n  const key = mKey(guildId);\n\n  const channel = useGetCurrentChannel(channelId, cKey(guildId));\n\n  const members = [];\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [screen, setScreen] = useState(\"START\");\n\n  const goBack = () => setScreen(\"START\");\n  const submitClose = () => {\n    setScreen(\"START\");\n    onClose();\n  };\n\n  async function handleEditChannel() {}\n\n  // eslint-disable-next-line\n  const { data: current } = useQuery(`${channelId}-members`, async () => {\n    const { data } = await getPrivateChannelMembers(channelId);\n    const current = members.filter((m) => data.includes(m.value));\n    setSelectedItems(current);\n    return current;\n  });\n\n  const handleCreateItem = (item) => {\n    setSelectedItems((curr) => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = (selectedItems) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  const ListItem = (selected) => {\n    return (\n      <Flex align=\"center\">\n        <Avatar mr={2} size=\"sm\" src={selected.image} />\n        <Text textColor={\"#000\"}>{selected.label}</Text>\n      </Flex>\n    );\n  };\n\n  if (!channel) return null;\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      {screen === \"START\" && (\n        <ModalContent bg=\"brandGray.light\">\n          <Formik\n            initialValues={{\n              name: channel.name,\n              isPublic: channel.isPublic,\n            }}\n            validationSchema={ChannelSchema}\n            onSubmit={handleEditChannel}\n          >\n            {({ isSubmitting, setFieldValue, values }) => (\n              <Form>\n                <ModalHeader textAlign=\"center\" fontWeight=\"bold\">\n                  Channel Settings\n                </ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                  <InputField label=\"channel name\" name=\"name\" />\n\n                  <FormControl\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                    mt=\"4\"\n                  >\n                    <FormLabel mb=\"0\">\n                      <Flex align=\"center\">\n                        <AiOutlineLock />\n                        <Text ml=\"2\">Private Channel</Text>\n                      </Flex>\n                    </FormLabel>\n                    <Switch\n                      defaultChecked={!values.isPublic}\n                      onChange={(e) => {\n                        setFieldValue(\"isPublic\", !e.target.checked);\n                      }}\n                    />\n                  </FormControl>\n                  <Text mt=\"4\" fontSize=\"14px\" textColor=\"brandGray.accent\">\n                    By making a channel private, only selected members will be\n                    able to view this channel\n                  </Text>\n                  {!values.isPublic && (\n                    <Box mt={\"2\"} pb={0}>\n                      <CUIAutoComplete\n                        label=\"Who can access this channel\"\n                        placeholder=\"\"\n                        onCreateItem={handleCreateItem}\n                        items={members}\n                        selectedItems={selectedItems}\n                        itemRenderer={ListItem}\n                        onSelectedItemsChange={(changes) =>\n                          handleSelectedItemsChange(changes.selectedItems)\n                        }\n                      />\n                    </Box>\n                  )}\n\n                  <Divider my={\"2\"} />\n\n                  <LightMode>\n                    <Button\n                      onClick={() => setScreen(\"CONFIRM\")}\n                      colorScheme={\"red\"}\n                      variant=\"ghost\"\n                      fontSize={\"14px\"}\n                      rightIcon={<FaRegTrashAlt />}\n                    >\n                      Delete Channel\n                    </Button>\n                  </LightMode>\n                </ModalBody>\n\n                <ModalFooter bg=\"brandGray.dark\">\n                  <Button\n                    onClick={onClose}\n                    mr={6}\n                    variant=\"link\"\n                    fontSize={\"14px\"}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    background=\"highlight.standard\"\n                    color=\"white\"\n                    type=\"submit\"\n                    _hover={{ bg: \"highlight.hover\" }}\n                    _active={{ bg: \"highlight.active\" }}\n                    _focus={{ boxShadow: \"none\" }}\n                    isLoading={isSubmitting}\n                    fontSize={\"14px\"}\n                  >\n                    Save Changes\n                  </Button>\n                </ModalFooter>\n              </Form>\n            )}\n          </Formik>\n        </ModalContent>\n      )}\n      {screen === \"CONFIRM\" && (\n        <DeleteChannelModal\n          goBack={goBack}\n          submitClose={submitClose}\n          name={channel.name}\n          channelId={channel.id}\n          guildId={guildId}\n        />\n      )}\n    </Modal>\n  );\n}\n\nfunction DeleteChannelModal({ goBack, submitClose, name, channelId, guildId }) {\n  async function handleDeleteChannel() {}\n\n  return (\n    <ModalContent bg=\"brandGray.light\">\n      <ModalHeader fontWeight=\"bold\" pb=\"0\">\n        Delete Channel\n      </ModalHeader>\n      <ModalBody pb={3}>\n        <Text>\n          Are you sure you want to delete #{name}? This cannot be undone.\n        </Text>\n      </ModalBody>\n\n      <ModalFooter bg=\"brandGray.dark\">\n        <Button mr={6} variant=\"link\" onClick={goBack} fontSize={\"14px\"}>\n          Cancel\n        </Button>\n        <LightMode>\n          <Button\n            colorScheme=\"red\"\n            fontSize={\"14px\"}\n            onClick={handleDeleteChannel}\n          >\n            Delete Channel\n          </Button>\n        </LightMode>\n      </ModalFooter>\n    </ModalContent>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}