{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nimport { useIsMounted } from './useIsMounted';\nexport function useQueries(queries) {\n  var isMounted = useIsMounted();\n  var queryClient = useQueryClient(); // Create queries observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new QueriesObserver(queryClient, queries);\n  observerRef.current = observer; // Update queries\n\n  if (observer.hasListeners()) {\n    observer.setQueries(queries);\n  }\n\n  var _React$useState = React.useState(function () {\n    return observer.getCurrentResult();\n  }),\n      currentResult = _React$useState[0],\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      if (isMounted()) {\n        setCurrentResult(result);\n      }\n    }));\n  }, [observer, isMounted]);\n  return currentResult;\n}","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/node_modules/react-query/es/react/useQueries.js"],"names":["React","notifyManager","QueriesObserver","useQueryClient","useIsMounted","useQueries","queries","isMounted","queryClient","observerRef","useRef","observer","current","hasListeners","setQueries","_React$useState","useState","getCurrentResult","currentResult","setCurrentResult","useEffect","subscribe","batchCalls","result"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,MAAIC,SAAS,GAAGH,YAAY,EAA5B;AACA,MAAII,WAAW,GAAGL,cAAc,EAAhC,CAFkC,CAEE;;AAEpC,MAAIM,WAAW,GAAGT,KAAK,CAACU,MAAN,EAAlB;AACA,MAAIC,QAAQ,GAAGF,WAAW,CAACG,OAAZ,IAAuB,IAAIV,eAAJ,CAAoBM,WAApB,EAAiCF,OAAjC,CAAtC;AACAG,EAAAA,WAAW,CAACG,OAAZ,GAAsBD,QAAtB,CANkC,CAMF;;AAEhC,MAAIA,QAAQ,CAACE,YAAT,EAAJ,EAA6B;AAC3BF,IAAAA,QAAQ,CAACG,UAAT,CAAoBR,OAApB;AACD;;AAED,MAAIS,eAAe,GAAGf,KAAK,CAACgB,QAAN,CAAe,YAAY;AAC/C,WAAOL,QAAQ,CAACM,gBAAT,EAAP;AACD,GAFqB,CAAtB;AAAA,MAGIC,aAAa,GAAGH,eAAe,CAAC,CAAD,CAHnC;AAAA,MAIII,gBAAgB,GAAGJ,eAAe,CAAC,CAAD,CAJtC,CAZkC,CAgBS;;;AAG3Cf,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAY;AAC1B,WAAOT,QAAQ,CAACU,SAAT,CAAmBpB,aAAa,CAACqB,UAAd,CAAyB,UAAUC,MAAV,EAAkB;AACnE,UAAIhB,SAAS,EAAb,EAAiB;AACfY,QAAAA,gBAAgB,CAACI,MAAD,CAAhB;AACD;AACF,KAJyB,CAAnB,CAAP;AAKD,GAND,EAMG,CAACZ,QAAD,EAAWJ,SAAX,CANH;AAOA,SAAOW,aAAP;AACD","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nimport { useIsMounted } from './useIsMounted';\nexport function useQueries(queries) {\n  var isMounted = useIsMounted();\n  var queryClient = useQueryClient(); // Create queries observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new QueriesObserver(queryClient, queries);\n  observerRef.current = observer; // Update queries\n\n  if (observer.hasListeners()) {\n    observer.setQueries(queries);\n  }\n\n  var _React$useState = React.useState(function () {\n    return observer.getCurrentResult();\n  }),\n      currentResult = _React$useState[0],\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      if (isMounted()) {\n        setCurrentResult(result);\n      }\n    }));\n  }, [observer, isMounted]);\n  return currentResult;\n}"]},"metadata":{},"sourceType":"module"}