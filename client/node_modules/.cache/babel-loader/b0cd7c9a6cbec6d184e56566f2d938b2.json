{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getStatusProps, isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.initialDataUpdateCount = 0;\n    _this.initialErrorUpdateCount = 0;\n    _this.trackedProps = [];\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.updateQuery();\n      this.currentQuery.addObserver(this);\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch();\n      }\n\n      this.updateResult();\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.willLoadOnMount = function willLoadOnMount() {\n    return this.options.enabled !== false && !this.currentQuery.state.dataUpdatedAt && !(this.currentQuery.state.status === 'error' && this.options.retryOnMount === false);\n  };\n\n  _proto.willRefetchOnMount = function willRefetchOnMount() {\n    return this.options.enabled !== false && this.currentQuery.state.dataUpdatedAt > 0 && (this.options.refetchOnMount === 'always' || this.options.refetchOnMount !== false && this.isStale());\n  };\n\n  _proto.willFetchOnMount = function willFetchOnMount() {\n    return this.willLoadOnMount() || this.willRefetchOnMount();\n  };\n\n  _proto.willFetchOnReconnect = function willFetchOnReconnect() {\n    return this.options.enabled !== false && (this.options.refetchOnReconnect === 'always' || this.options.refetchOnReconnect !== false && this.isStale());\n  };\n\n  _proto.willFetchOnWindowFocus = function willFetchOnWindowFocus() {\n    return this.options.enabled !== false && (this.options.refetchOnWindowFocus === 'always' || this.options.refetchOnWindowFocus !== false && this.isStale());\n  };\n\n  _proto.willFetchOptionally = function willFetchOptionally() {\n    return this.options.enabled !== false && this.isStale();\n  };\n\n  _proto.isStale = function isStale() {\n    return this.currentQuery.isStaleByTime(this.options.staleTime);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options) {\n    this.previousOptions = this.options;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = this.previousOptions.queryKey;\n    }\n\n    var didUpdateQuery = this.updateQuery();\n    var optionalFetch;\n    var updateResult;\n    var updateStaleTimeout;\n    var updateRefetchInterval; // If we subscribed to a new query, optionally fetch and update result and timers\n\n    if (didUpdateQuery) {\n      optionalFetch = true;\n      updateResult = true;\n      updateStaleTimeout = true;\n      updateRefetchInterval = true;\n    } // Optionally fetch if the query became enabled\n\n\n    if (this.options.enabled !== false && this.previousOptions.enabled === false) {\n      optionalFetch = true;\n    } // Update result if the select function changed\n\n\n    if (this.options.select !== this.previousOptions.select) {\n      updateResult = true;\n    } // Update stale interval if needed\n\n\n    if (this.options.enabled !== this.previousOptions.enabled || this.options.staleTime !== this.previousOptions.staleTime) {\n      updateStaleTimeout = true;\n    } // Update refetch interval if needed\n\n\n    if (this.options.enabled !== this.previousOptions.enabled || this.options.refetchInterval !== this.previousOptions.refetchInterval) {\n      updateRefetchInterval = true;\n    } // Fetch only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch();\n      }\n    }\n\n    if (updateResult) {\n      this.updateResult();\n    } // Update intervals only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout();\n      }\n\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval();\n      }\n    }\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.getTrackedCurrentResult = function getTrackedCurrentResult() {\n    return this.trackedCurrentResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this2.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this3 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this3.updateResult();\n\n      return _this3.currentResult;\n    });\n  };\n\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.willFetchOptionally()) {\n      this.executeFetch();\n    }\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this4 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this4.currentResult.isStale) {\n        _this4.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this5 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this5.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this5.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.getNewResult = function getNewResult() {\n    var _this$previousQueryRe;\n\n    var state = this.currentQuery.state;\n    var isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data;\n    var dataUpdatedAt = state.dataUpdatedAt; // Optimistically set status to loading if we will start fetching\n\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true;\n\n      if (!dataUpdatedAt) {\n        status = 'loading';\n      }\n    } // Keep previous data if needed\n\n\n    if (this.options.keepPreviousData && !state.dataUpdateCount && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess) && status !== 'error') {\n      data = this.previousQueryResult.data;\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n        var _this$currentResultSt, _this$previousOptions; // Use the previous select result if the query data and select function did not change\n\n\n        if (this.currentResult && state.data === ((_this$currentResultSt = this.currentResultState) == null ? void 0 : _this$currentResultSt.data) && this.options.select === ((_this$previousOptions = this.previousOptions) == null ? void 0 : _this$previousOptions.select)) {\n          data = this.currentResult.data;\n        } else {\n          data = this.options.select(state.data);\n\n          if (this.options.structuralSharing !== false) {\n            var _this$currentResult;\n\n            data = replaceEqualDeep((_this$currentResult = this.currentResult) == null ? void 0 : _this$currentResult.data, data);\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof this.options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData = typeof this.options.placeholderData === 'function' ? this.options.placeholderData() : this.options.placeholderData;\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = _extends({}, getStatusProps(status), {\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > this.initialDataUpdateCount || state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove\n    });\n\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(prevResult, result) {\n    var _this6 = this;\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (prevResult === result) {\n      return false;\n    }\n\n    if (!prevResult) {\n      return true;\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    var keys = Object.keys(result);\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n\n    var _loop = function _loop(i) {\n      var key = keys[i];\n      var changed = prevResult[key] !== result[key];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          return \"continue\";\n        }\n\n        if (!notifyOnChangeProps || isIncluded || notifyOnChangeProps === 'tracked' && _this6.trackedProps.length === 0) {\n          return {\n            v: true\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < keys.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return false;\n  };\n\n  _proto.updateResult = function updateResult(action) {\n    var _this7 = this;\n\n    var prevResult = this.currentResult;\n    var result = this.getNewResult(); // Keep reference to the current state on which the current result is based on\n\n    this.currentResultState = this.currentQuery.state; // Only update if something has changed\n\n    if (shallowEqualObjects(result, prevResult)) {\n      return;\n    }\n\n    this.currentResult = result;\n\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      var addTrackedProps = function addTrackedProps(prop) {\n        if (!_this7.trackedProps.includes(prop)) {\n          _this7.trackedProps.push(prop);\n        }\n      };\n\n      this.trackedCurrentResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(_this7.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            addTrackedProps(key);\n            return result[key];\n          }\n        });\n      });\n    } // Determine which callbacks to trigger\n\n\n    var notifyOptions = {\n      cache: true\n    };\n\n    if ((action == null ? void 0 : action.type) === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if ((action == null ? void 0 : action.type) === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true;\n    }\n\n    this.notify(notifyOptions);\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var prevQuery = this.currentQuery;\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === prevQuery) {\n      return false;\n    }\n\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialDataUpdateCount = query.state.dataUpdateCount;\n    this.initialErrorUpdateCount = query.state.errorUpdateCount;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      this.currentQuery.addObserver(this);\n    }\n\n    return true;\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    this.updateResult(action);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify(_this8.currentQuery);\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/node_modules/react-query/es/core/queryObserver.js"],"names":["_extends","_inheritsLoose","getStatusProps","isServer","isValidTimeout","noop","replaceEqualDeep","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","QueryObserver","_Subscribable","client","options","_this","call","initialDataUpdateCount","initialErrorUpdateCount","trackedProps","bindMethods","setOptions","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","updateQuery","currentQuery","addObserver","willFetchOnMount","executeFetch","updateResult","updateTimers","onUnsubscribe","destroy","willLoadOnMount","enabled","state","dataUpdatedAt","status","retryOnMount","willRefetchOnMount","refetchOnMount","isStale","willFetchOnReconnect","refetchOnReconnect","willFetchOnWindowFocus","refetchOnWindowFocus","willFetchOptionally","isStaleByTime","staleTime","clearTimers","removeObserver","previousOptions","defaultQueryObserverOptions","Error","queryKey","didUpdateQuery","optionalFetch","updateStaleTimeout","updateRefetchInterval","select","refetchInterval","hasListeners","getCurrentResult","currentResult","getTrackedCurrentResult","trackedCurrentResult","getNextResult","_this2","Promise","resolve","reject","unsubscribe","subscribe","result","isFetching","isError","throwOnError","error","getCurrentQuery","getQueryCache","fetch","fetchOptions","_this3","then","promise","catch","_this4","clearStaleTimeout","time","timeout","staleTimeoutId","setTimeout","_this5","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","getNewResult","_this$previousQueryRe","isPreviousData","isPlaceholderData","data","keepPreviousData","dataUpdateCount","previousQueryResult","isSuccess","_this$currentResultSt","_this$previousOptions","currentResultState","structuralSharing","_this$currentResult","placeholderData","errorUpdatedAt","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","prevResult","_this6","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","keys","Object","includedProps","_loop","i","key","changed","isIncluded","some","x","isExcluded","v","_ret","action","_this7","addTrackedProps","prop","includes","push","forEach","defineProperty","configurable","enumerable","get","notifyOptions","cache","type","onSuccess","onError","notify","prevQuery","query","build","onQueryUpdate","_this8","batch","onSettled","listener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getStatusProps, isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.initialDataUpdateCount = 0;\n    _this.initialErrorUpdateCount = 0;\n    _this.trackedProps = [];\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.updateQuery();\n      this.currentQuery.addObserver(this);\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch();\n      }\n\n      this.updateResult();\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.willLoadOnMount = function willLoadOnMount() {\n    return this.options.enabled !== false && !this.currentQuery.state.dataUpdatedAt && !(this.currentQuery.state.status === 'error' && this.options.retryOnMount === false);\n  };\n\n  _proto.willRefetchOnMount = function willRefetchOnMount() {\n    return this.options.enabled !== false && this.currentQuery.state.dataUpdatedAt > 0 && (this.options.refetchOnMount === 'always' || this.options.refetchOnMount !== false && this.isStale());\n  };\n\n  _proto.willFetchOnMount = function willFetchOnMount() {\n    return this.willLoadOnMount() || this.willRefetchOnMount();\n  };\n\n  _proto.willFetchOnReconnect = function willFetchOnReconnect() {\n    return this.options.enabled !== false && (this.options.refetchOnReconnect === 'always' || this.options.refetchOnReconnect !== false && this.isStale());\n  };\n\n  _proto.willFetchOnWindowFocus = function willFetchOnWindowFocus() {\n    return this.options.enabled !== false && (this.options.refetchOnWindowFocus === 'always' || this.options.refetchOnWindowFocus !== false && this.isStale());\n  };\n\n  _proto.willFetchOptionally = function willFetchOptionally() {\n    return this.options.enabled !== false && this.isStale();\n  };\n\n  _proto.isStale = function isStale() {\n    return this.currentQuery.isStaleByTime(this.options.staleTime);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options) {\n    this.previousOptions = this.options;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = this.previousOptions.queryKey;\n    }\n\n    var didUpdateQuery = this.updateQuery();\n    var optionalFetch;\n    var updateResult;\n    var updateStaleTimeout;\n    var updateRefetchInterval; // If we subscribed to a new query, optionally fetch and update result and timers\n\n    if (didUpdateQuery) {\n      optionalFetch = true;\n      updateResult = true;\n      updateStaleTimeout = true;\n      updateRefetchInterval = true;\n    } // Optionally fetch if the query became enabled\n\n\n    if (this.options.enabled !== false && this.previousOptions.enabled === false) {\n      optionalFetch = true;\n    } // Update result if the select function changed\n\n\n    if (this.options.select !== this.previousOptions.select) {\n      updateResult = true;\n    } // Update stale interval if needed\n\n\n    if (this.options.enabled !== this.previousOptions.enabled || this.options.staleTime !== this.previousOptions.staleTime) {\n      updateStaleTimeout = true;\n    } // Update refetch interval if needed\n\n\n    if (this.options.enabled !== this.previousOptions.enabled || this.options.refetchInterval !== this.previousOptions.refetchInterval) {\n      updateRefetchInterval = true;\n    } // Fetch only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch();\n      }\n    }\n\n    if (updateResult) {\n      this.updateResult();\n    } // Update intervals only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout();\n      }\n\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval();\n      }\n    }\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.getTrackedCurrentResult = function getTrackedCurrentResult() {\n    return this.trackedCurrentResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this2.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this3 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this3.updateResult();\n\n      return _this3.currentResult;\n    });\n  };\n\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.willFetchOptionally()) {\n      this.executeFetch();\n    }\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this4 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this4.currentResult.isStale) {\n        _this4.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this5 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this5.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this5.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.getNewResult = function getNewResult() {\n    var _this$previousQueryRe;\n\n    var state = this.currentQuery.state;\n    var isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data;\n    var dataUpdatedAt = state.dataUpdatedAt; // Optimistically set status to loading if we will start fetching\n\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true;\n\n      if (!dataUpdatedAt) {\n        status = 'loading';\n      }\n    } // Keep previous data if needed\n\n\n    if (this.options.keepPreviousData && !state.dataUpdateCount && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess) && status !== 'error') {\n      data = this.previousQueryResult.data;\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n        var _this$currentResultSt, _this$previousOptions;\n\n        // Use the previous select result if the query data and select function did not change\n        if (this.currentResult && state.data === ((_this$currentResultSt = this.currentResultState) == null ? void 0 : _this$currentResultSt.data) && this.options.select === ((_this$previousOptions = this.previousOptions) == null ? void 0 : _this$previousOptions.select)) {\n          data = this.currentResult.data;\n        } else {\n          data = this.options.select(state.data);\n\n          if (this.options.structuralSharing !== false) {\n            var _this$currentResult;\n\n            data = replaceEqualDeep((_this$currentResult = this.currentResult) == null ? void 0 : _this$currentResult.data, data);\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof this.options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData = typeof this.options.placeholderData === 'function' ? this.options.placeholderData() : this.options.placeholderData;\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = _extends({}, getStatusProps(status), {\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > this.initialDataUpdateCount || state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove\n    });\n\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(prevResult, result) {\n    var _this6 = this;\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (prevResult === result) {\n      return false;\n    }\n\n    if (!prevResult) {\n      return true;\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    var keys = Object.keys(result);\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n\n    var _loop = function _loop(i) {\n      var key = keys[i];\n      var changed = prevResult[key] !== result[key];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          return \"continue\";\n        }\n\n        if (!notifyOnChangeProps || isIncluded || notifyOnChangeProps === 'tracked' && _this6.trackedProps.length === 0) {\n          return {\n            v: true\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < keys.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return false;\n  };\n\n  _proto.updateResult = function updateResult(action) {\n    var _this7 = this;\n\n    var prevResult = this.currentResult;\n    var result = this.getNewResult(); // Keep reference to the current state on which the current result is based on\n\n    this.currentResultState = this.currentQuery.state; // Only update if something has changed\n\n    if (shallowEqualObjects(result, prevResult)) {\n      return;\n    }\n\n    this.currentResult = result;\n\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      var addTrackedProps = function addTrackedProps(prop) {\n        if (!_this7.trackedProps.includes(prop)) {\n          _this7.trackedProps.push(prop);\n        }\n      };\n\n      this.trackedCurrentResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(_this7.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            addTrackedProps(key);\n            return result[key];\n          }\n        });\n      });\n    } // Determine which callbacks to trigger\n\n\n    var notifyOptions = {\n      cache: true\n    };\n\n    if ((action == null ? void 0 : action.type) === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if ((action == null ? void 0 : action.type) === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true;\n    }\n\n    this.notify(notifyOptions);\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var prevQuery = this.currentQuery;\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === prevQuery) {\n      return false;\n    }\n\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialDataUpdateCount = query.state.dataUpdateCount;\n    this.initialErrorUpdateCount = query.state.errorUpdateCount;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      this.currentQuery.addObserver(this);\n    }\n\n    return true;\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    this.updateResult(action);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify(_this8.currentQuery);\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);"]},"metadata":{},"sourceType":"module"}