{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/layouts/guild/chat/ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Flex, Spinner } from \"@chakra-ui/react\";\nimport { getMessages } from \"api/handler/messages\";\nimport useMessageSocket from \"api/ws/useMessageSocket\";\nimport Message from \"components/items/message/Message\";\nimport DateDivider from \"components/sections/DateDivider\";\nimport StartMessages from \"components/sections/StartMessages\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { checkNewDay, getTimeDifference } from \"utils/dateUtils\";\nimport guildScrollbarCss from \"../css/GuildScrollerCSS\";\nimport ChatGrid from \"./ChatGrid\";\nexport default function ChatScreen() {\n  _s();\n\n  const {\n    channelId\n  } = useParams();\n  const [hasMore, setHasMore] = useState(true);\n  const qKey = `messages-${channelId}`;\n  useMessageSocket(channelId, qKey);\n\n  if (false) {\n    return /*#__PURE__*/_jsxDEV(ChatGrid, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        justify: \"center\",\n        h: \"full\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          thickness: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  const checkIfWithinTime = (message1, message2) => {};\n\n  const messages = [];\n  return /*#__PURE__*/_jsxDEV(ChatGrid, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      h: \"10px\",\n      mt: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      as: InfiniteScroll,\n      css: guildScrollbarCss,\n      dataLength: messages.length // next={fetchNextPage}\n      ,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column-reverse\"\n      },\n      inverse: true,\n      hasMore: hasMore,\n      loader: messages.length > 0 && /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        justify: \"center\",\n        h: \"50px\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this),\n      scrollableTarget: \"chatGrid\",\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Message, {\n          message: m,\n          isCompact: checkIfWithinTime(m, messages[Math.min(i + 1, messages.length - 1)])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), checkNewDay(m.createdAt, messages[Math.min(i + 1, messages.length - 1)].createdAt) && /*#__PURE__*/_jsxDEV(DateDivider, {\n          date: m.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 18\n        }, this)]\n      }, m.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), !hasMore && /*#__PURE__*/_jsxDEV(StartMessages, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatScreen, \"n/gKe0a1KGx5r+5ddZU5Pd84rrs=\", false, function () {\n  return [useParams, useMessageSocket];\n});\n\n_c = ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/layouts/guild/chat/ChatScreen.js"],"names":["Box","Flex","Spinner","getMessages","useMessageSocket","Message","DateDivider","StartMessages","React","useState","InfiniteScroll","useInfiniteQuery","useParams","checkNewDay","getTimeDifference","guildScrollbarCss","ChatGrid","ChatScreen","channelId","hasMore","setHasMore","qKey","checkIfWithinTime","message1","message2","messages","length","display","flexDirection","map","m","i","Math","min","createdAt","id"],"mappings":"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","sourcesContent":["import { Box, Flex, Spinner } from \"@chakra-ui/react\";\nimport { getMessages } from \"api/handler/messages\";\nimport useMessageSocket from \"api/ws/useMessageSocket\";\nimport Message from \"components/items/message/Message\";\nimport DateDivider from \"components/sections/DateDivider\";\nimport StartMessages from \"components/sections/StartMessages\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { checkNewDay, getTimeDifference } from \"utils/dateUtils\";\nimport guildScrollbarCss from \"../css/GuildScrollerCSS\";\nimport ChatGrid from \"./ChatGrid\";\n\nexport default function ChatScreen() {\n  const { channelId } = useParams();\n  const [hasMore, setHasMore] = useState(true);\n  const qKey = `messages-${channelId}`;\n\n  useMessageSocket(channelId, qKey);\n\n  if (false) {\n    return (\n      <ChatGrid>\n        <Flex align={\"center\"} justify={\"center\"} h={\"full\"}>\n          <Spinner size={\"xl\"} thickness={\"4px\"} />\n        </Flex>\n      </ChatGrid>\n    );\n  }\n\n  const checkIfWithinTime = (message1, message2) => {};\n\n  const messages = [];\n\n  return (\n    <ChatGrid>\n      <Box h={\"10px\"} mt={4} />\n      <Box\n        as={InfiniteScroll}\n        css={guildScrollbarCss}\n        dataLength={messages.length}\n        // next={fetchNextPage}\n        style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n        inverse={true}\n        hasMore={hasMore}\n        loader={\n          messages.length > 0 && (\n            <Flex align={\"center\"} justify={\"center\"} h={\"50px\"}>\n              <Spinner />\n            </Flex>\n          )\n        }\n        scrollableTarget=\"chatGrid\"\n      >\n        {messages.map((m, i) => (\n          <React.Fragment key={m.id}>\n            <Message\n              message={m}\n              isCompact={checkIfWithinTime(\n                m,\n                messages[Math.min(i + 1, messages.length - 1)]\n              )}\n            />\n            {checkNewDay(\n              m.createdAt,\n              messages[Math.min(i + 1, messages.length - 1)].createdAt\n            ) && <DateDivider date={m.createdAt} />}\n          </React.Fragment>\n        ))}\n      </Box>\n      {!hasMore && <StartMessages />}\n    </ChatGrid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}