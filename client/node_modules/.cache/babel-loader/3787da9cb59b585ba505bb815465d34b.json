{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ensureArray, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n// CLASS\n\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n\n    this.options = _extends({}, this.defaultOptions, options); // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this);\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n\n  _proto.setState = function setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state: state\n    });\n  };\n\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnWindowFocus();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnReconnect();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel();\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n\n    if (this.state.isFetching) if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n      // Silently cancel current fetch if the user wants to cancel refetches\n      this.cancel({\n        silent: true\n      });\n    } else if (this.promise) {\n      // Return current promise if we are already fetching\n      return this.promise;\n    } // Update config if passed, otherwise the config from the last execution is used\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    } // Create query function context\n\n\n    var queryKey = ensureArray(this.queryKey);\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined\n    }; // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject('Missing queryFn');\n    }; // Trigger behavior hook\n\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn\n    };\n\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Set to fetching state if not already in it\n\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onSuccess: function onSuccess(data) {\n        _this2.setData(data); // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onError: function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (_this2.cache.config.onError) {\n            _this2.cache.config.onError(error, _this2);\n          } // Log error\n\n\n          getLogger().error(error);\n        } // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this3.cache.notify(_this3);\n    });\n  };\n\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status\n        });\n\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n\n      case 'error':\n        var error = action.error;\n\n        if (isCancelledError(error) && error.revert) {\n          var previousStatus;\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle';\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success';\n          } else {\n            previousStatus = 'error';\n          }\n\n          return _extends({}, state, {\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus\n          });\n        }\n\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n\n      case 'setState':\n        return _extends({}, state, action.state);\n\n      default:\n        return state;\n    }\n  };\n\n  return Query;\n}();","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/node_modules/react-query/es/core/query.js"],"names":["_extends","ensureArray","functionalUpdate","isValidTimeout","noop","replaceEqualDeep","timeUntilStale","notifyManager","getLogger","Retryer","isCancelledError","Query","config","defaultOptions","setOptions","options","observers","cache","queryKey","queryHash","initialState","state","getDefaultState","scheduleGc","_proto","prototype","_this$options$cacheTi","cacheTime","Math","max","setDefaultOptions","_this","clearGcTimeout","gcTimeout","setTimeout","optionalRemove","clearTimeout","undefined","length","isFetching","remove","setData","updater","_this$options$isDataE","_this$options","prevData","data","isDataEqual","call","structuralSharing","dispatch","type","dataUpdatedAt","updatedAt","setState","cancel","_this$retryer","promise","retryer","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","_this$retryer2","find","x","willFetchOnWindowFocus","refetch","continue","onOnline","_this$retryer3","willFetchOnReconnect","addObserver","indexOf","push","notify","removeObserver","filter","isTransportCancelable","cancelRetry","invalidate","fetch","fetchOptions","_this2","_this$options$behavio","_context$fetchOptions","cancelRefetch","queryFn","queryFnContext","pageParam","fetchFn","reject","context","behavior","onFetch","_this$options$behavio2","fetchMeta","meta","_context$fetchOptions2","fn","onSuccess","onError","error","onFail","onPause","onContinue","retry","retryDelay","action","_this3","reducer","batch","forEach","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","fetchFailureCount","isPaused","status","_action$meta","_action$dataUpdatedAt","revert","previousStatus"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ensureArray, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n\n// CLASS\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n\n    this.options = _extends({}, this.defaultOptions, options); // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this);\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n\n  _proto.setState = function setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state: state\n    });\n  };\n\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnWindowFocus();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnReconnect();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel();\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n\n    if (this.state.isFetching) if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n      // Silently cancel current fetch if the user wants to cancel refetches\n      this.cancel({\n        silent: true\n      });\n    } else if (this.promise) {\n      // Return current promise if we are already fetching\n      return this.promise;\n    } // Update config if passed, otherwise the config from the last execution is used\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    } // Create query function context\n\n\n    var queryKey = ensureArray(this.queryKey);\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined\n    }; // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject('Missing queryFn');\n    }; // Trigger behavior hook\n\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn\n    };\n\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Set to fetching state if not already in it\n\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onSuccess: function onSuccess(data) {\n        _this2.setData(data); // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onError: function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (_this2.cache.config.onError) {\n            _this2.cache.config.onError(error, _this2);\n          } // Log error\n\n\n          getLogger().error(error);\n        } // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this3.cache.notify(_this3);\n    });\n  };\n\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status\n        });\n\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n\n      case 'error':\n        var error = action.error;\n\n        if (isCancelledError(error) && error.revert) {\n          var previousStatus;\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle';\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success';\n          } else {\n            previousStatus = 'error';\n          }\n\n          return _extends({}, state, {\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus\n          });\n        }\n\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n\n      case 'setState':\n        return _extends({}, state, action.state);\n\n      default:\n        return state;\n    }\n  };\n\n  return Query;\n}();"]},"metadata":{},"sourceType":"module"}