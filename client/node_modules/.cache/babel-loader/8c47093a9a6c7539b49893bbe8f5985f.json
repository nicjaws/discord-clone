{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/CreateChannelModal.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, Box, Button, Flex, FormControl, FormLabel, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Switch, Text } from \"@chakra-ui/react\";\nimport { createChannel } from \"api/handler/channel\";\nimport { getGuildMembers } from \"api/handler/guilds\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { AiOutlineLock } from \"react-icons/ai\";\nimport { useQuery } from \"react-query\";\nimport { mKey } from \"utils/querykeys\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport { ChannelSchema } from \"validation/channel.schema\";\nimport InputField from \"components/shared/InputField\";\nexport default function CreateChannelModal({\n  guildId,\n  isOpen,\n  onClose\n}) {\n  _s();\n\n  const key = mKey(guildId);\n\n  async function handleCreateChannel() {}\n\n  const members = [];\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const handleCreateItem = item => {\n    setSelectedItems(curr => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = selectedItems => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  const ListItem = selected => {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        mr: 2,\n        size: \"sm\",\n        src: selected.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textColor: \"#000\",\n        children: selected.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      bg: \"brandGray.light\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: \"\",\n          isPublic: true\n        },\n        validationSchema: ChannelSchema,\n        onSubmit: handleCreateChannel,\n        children: ({\n          isSubmitting,\n          setFieldValue,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n            children: \"Create Text Channel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              label: \"channel name\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              mt: \"4\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"email-alerts\",\n                mb: \"0\",\n                children: /*#__PURE__*/_jsxDEV(Flex, {\n                  align: \"center\",\n                  children: [/*#__PURE__*/_jsxDEV(AiOutlineLock, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    ml: \"2\",\n                    children: \"Private Channel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                onChange: e => {\n                  setFieldValue(\"isPublic\", !e.target.checked);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              mt: \"4\",\n              fontSize: \"14px\",\n              textColor: \"brandGray.accent\",\n              children: \"By making a channel private, only selected members will be able to view this channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), !values.isPublic && /*#__PURE__*/_jsxDEV(Box, {\n              mt: \"2\",\n              pb: 0,\n              children: /*#__PURE__*/_jsxDEV(CUIAutoComplete, {\n                label: \"Who can access this channel\",\n                placeholder: \"\",\n                onCreateItem: handleCreateItem,\n                items: members,\n                selectedItems: selectedItems,\n                itemRenderer: ListItem,\n                onSelectedItemsChange: changes => handleSelectedItemsChange(changes.selectedItems)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            bg: \"brandGray.dark\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClose,\n              fontSize: \"14px\",\n              mr: 6,\n              variant: \"link\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              background: \"highlight.standard\",\n              color: \"white\",\n              type: \"submit\",\n              fontSize: \"14px\",\n              _hover: {\n                bg: \"highlight.hover\"\n              },\n              _active: {\n                bg: \"highlight.active\"\n              },\n              _focus: {\n                boxShadow: \"none\"\n              },\n              isLoading: isSubmitting,\n              children: \"Create Channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateChannelModal, \"tcTDBxdHCoS/ruNL27SUc7saNmM=\");\n\n_c = CreateChannelModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateChannelModal\");","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/discord-clone/client/src/components/modals/CreateChannelModal.js"],"names":["Avatar","Box","Button","Flex","FormControl","FormLabel","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Switch","Text","createChannel","getGuildMembers","CUIAutoComplete","Form","Formik","React","useState","AiOutlineLock","useQuery","mKey","toErrorMap","ChannelSchema","InputField","CreateChannelModal","guildId","isOpen","onClose","key","handleCreateChannel","members","selectedItems","setSelectedItems","handleCreateItem","item","curr","handleSelectedItemsChange","ListItem","selected","image","label","name","isPublic","isSubmitting","setFieldValue","values","e","target","checked","changes","bg","boxShadow"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { createChannel } from \"api/handler/channel\";\nimport { getGuildMembers } from \"api/handler/guilds\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { AiOutlineLock } from \"react-icons/ai\";\nimport { useQuery } from \"react-query\";\nimport { mKey } from \"utils/querykeys\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport { ChannelSchema } from \"validation/channel.schema\";\nimport InputField from \"components/shared/InputField\";\n\nexport default function CreateChannelModal({ guildId, isOpen, onClose }) {\n  const key = mKey(guildId);\n\n  async function handleCreateChannel() {}\n\n  const members = [];\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const handleCreateItem = (item) => {\n    setSelectedItems((curr) => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = (selectedItems) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  const ListItem = (selected) => {\n    return (\n      <Flex align=\"center\">\n        <Avatar mr={2} size=\"sm\" src={selected.image} />\n        <Text textColor={\"#000\"}>{selected.label}</Text>\n      </Flex>\n    );\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent bg=\"brandGray.light\">\n        <Formik\n          initialValues={{\n            name: \"\",\n            isPublic: true,\n          }}\n          validationSchema={ChannelSchema}\n          onSubmit={handleCreateChannel}\n        >\n          {({ isSubmitting, setFieldValue, values }) => (\n            <Form>\n              <ModalHeader textAlign=\"center\" fontWeight=\"bold\">\n                Create Text Channel\n              </ModalHeader>\n              <ModalCloseButton />\n              <ModalBody>\n                <InputField label=\"channel name\" name=\"name\" />\n\n                <FormControl\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"space-between\"\n                  mt=\"4\"\n                >\n                  <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\n                    <Flex align=\"center\">\n                      <AiOutlineLock />\n                      <Text ml=\"2\">Private Channel</Text>\n                    </Flex>\n                  </FormLabel>\n                  <Switch\n                    onChange={(e) => {\n                      setFieldValue(\"isPublic\", !e.target.checked);\n                    }}\n                  />\n                </FormControl>\n                <Text mt=\"4\" fontSize=\"14px\" textColor=\"brandGray.accent\">\n                  By making a channel private, only selected members will be\n                  able to view this channel\n                </Text>\n                {!values.isPublic && (\n                  <Box mt={\"2\"} pb={0}>\n                    <CUIAutoComplete\n                      label=\"Who can access this channel\"\n                      placeholder=\"\"\n                      onCreateItem={handleCreateItem}\n                      items={members}\n                      selectedItems={selectedItems}\n                      itemRenderer={ListItem}\n                      onSelectedItemsChange={(changes) =>\n                        handleSelectedItemsChange(changes.selectedItems)\n                      }\n                    />\n                  </Box>\n                )}\n              </ModalBody>\n\n              <ModalFooter bg=\"brandGray.dark\">\n                <Button\n                  onClick={onClose}\n                  fontSize={\"14px\"}\n                  mr={6}\n                  variant=\"link\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  background=\"highlight.standard\"\n                  color=\"white\"\n                  type=\"submit\"\n                  fontSize={\"14px\"}\n                  _hover={{ bg: \"highlight.hover\" }}\n                  _active={{ bg: \"highlight.active\" }}\n                  _focus={{ boxShadow: \"none\" }}\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </ModalFooter>\n            </Form>\n          )}\n        </Formik>\n      </ModalContent>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}